parameters:
  workingDirectory: $(system.defaultWorkingDirectory)
  storageAccount: ""
  armServiceConnection: ""
  dnsServiceConnection: ""
  idamTenantId: ""
  idamClientId: ""
  idamClientSecret: ""
  buildAgentvNet: ""
  environment: ""
  dev_group: ""

steps:
  - task: TerraformInstaller@0
    displayName: 'Install Terraform 0.12.13'
    inputs:
          terraformVersion: 0.12.13

  - script: |
      terraform --version
      terraform init -backend=false -reconfigure
      terraform validate
    workingDirectory: ${{ parameters.workingDirectory }}
    displayName: "Terraform validate"
    condition: succeeded()

  - template: terraform-loginprep.yml
    parameters:
      workingDirectory: ${{ parameters.workingDirectory }}
      storageAccount: ${{ parameters.storageAccount }}
      armServiceConnection: ${{ parameters.armServiceConnection }}
      dnsServiceConnection: ${{ parameters.dnsServiceConnection }}
      idamTenantId: ${{ parameters.idamTenantId }}
      idamClientId: ${{ parameters.idamClientId }}
      idamClientSecret: ${{ parameters.idamClientSecret }}
      buildAgentvNet: ${{ parameters.buildAgentvNet }}
      dev_group: ${{ parameters.dev_group }}
      environment: ${{ parameters.environment }}

  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{ parameters.armServiceConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      failOnStandardError: false
      inlineScript: |
        terraform plan -out="plan.tfplan" -input=false
      workingDirectory: ${{ parameters.workingDirectory }}
    displayName: Terraform plan
    condition: succeeded()
  
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Terraform Plan'
    inputs:
      targetPath: '${{ parameters.workingDirectory }}/plan.tfplan'
      artifact: tfplan-${{ parameters.environment }}
