parameters:
  workingDirectory: $(system.defaultWorkingDirectory)
  storageAccount: ""
  armServiceConnection: ""
  dnsServiceConnection: ""
  aksServiceConnection: ""
  idamTenantId: ""
  idamClientId: ""
  idamClientSecret: ""
  buildAgentvNet: ""
  dev_group: ""
  environment: ""
  aks_public_subnet: ""
  aks_vnet: ""
  aks_vnet_rg: ""

steps:
  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{ parameters.armServiceConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      AddSpnToEnvironment: true
      workingDirectory: ${{ parameters.workingDirectory }}
      inlineScript: |
        echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
        echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$env:servicePrincipalKey"
        az account set -s ${{ parameters.armServiceConnection }}
        echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query 'id' --output tsv)"
        echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query 'tenantId' --output tsv)"
        echo "##vso[task.setvariable variable=ARM_ACCESS_KEY]$(az storage account keys list -n ${{ parameters.storageAccount }} --query [0].value --output tsv)"
    displayName: Terraform Prepare Login
    condition: succeeded()

  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{ parameters.aksServiceConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      AddSpnToEnvironment: true
      failOnStandardError: true
      inlineScript: |
        echo "##vso[task.setvariable variable=aks_Client_Id]$env:servicePrincipalId"
        echo "##vso[task.setvariable variable=aks_Client_Secret]$env:servicePrincipalKey"
        echo "##vso[task.setvariable variable=aks_Subscription_Id]$(az account show -s ${{ parameters.aksServiceConnection }} --query 'id' --output tsv)"
        echo "##vso[task.setvariable variable=aks_Tenant_Id]$(az account show --query 'tenantId' --output tsv)"
    displayName: Terraform Prepare Login (AKS)
    condition: succeeded()

  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{ parameters.dnsServiceConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      AddSpnToEnvironment: true
      failOnStandardError: true
      inlineScript: |
        echo "##vso[task.setvariable variable=dns_Client_Id]$env:servicePrincipalId"
        echo "##vso[task.setvariable variable=dns_Client_Secret]$env:servicePrincipalKey"
        echo "##vso[task.setvariable variable=dns_Subscription_Id]$(az account show -s ${{ parameters.dnsServiceConnection }} --query 'id' --output tsv)"
        echo "##vso[task.setvariable variable=dns_Tenant_Id]$(az account show --query 'tenantId' --output tsv)"
    displayName: Terraform Prepare Login (DNS)
    condition: succeeded()

  - pwsh: |
      @{
        build_agent_vnet = "$env:buildAgentvNet" -split ","
        idam_tenant_id = "$env:idam_Tenant_Id"
        idam_client_id = "$env:idam_Client_Id"
        idam_client_secret = "$env:idam_Client_Secret"
        dns_tenant_id = $env:dns_Tenant_Id
        dns_client_id = $env:dns_Client_Id
        dns_client_secret = $env:dns_Client_Secret
        dns_subscription_id = $env:dns_Subscription_Id
        aks_tenant_id = $env:aks_Tenant_Id
        aks_client_id = $env:aks_Client_Id
        aks_client_secret = $env:aks_Client_Secret
        aks_subscription_id = $env:aks_Subscription_Id
        dev_group = $env:dev_group
        aks_public_subnet = $env:aks_public_subnet
        aks_vnet = $env:aks_vnet
        aks_vnet_rg = $env:aks_vnet_rg
      } | ConvertTo-Json | Set-Content params.auto.tfvars.json -force
    workingDirectory: ${{ parameters.workingDirectory }}
    displayName: "Create Param File"
    condition: succeeded()
    env:
      idam_Tenant_Id: ${{ parameters.idamTenantId }}
      idam_Client_Id: ${{ parameters.idamClientId }}
      idam_Client_Secret: ${{ parameters.idamClientSecret }}
      buildAgentvNet: ${{ parameters.buildAgentvNet }}
      dev_group: ${{ parameters.dev_group }}
      aks_public_subnet: ${{ parameters.aks_public_subnet }}
      aks_vnet: ${{ parameters.aks_vnet }}
      aks_vnet_rg: ${{ parameters.aks_vnet_rg }}

  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{ parameters.armServiceConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      failOnStandardError: false
      inlineScript: |
        $tfFolder = Join-Path "${{ parameters.workingDirectory }}" ".terraform"
        if(test-path $tfFolder) {
          Remove-Item $tfFolder -Force -Recurse
        }

        $tfPlan = Join-Path "${{ parameters.workingDirectory }}" "plan.tfplan"
        if(test-path $tfPlan) {
          Remove-Item $tfPlan -Force
        }

        terraform init -backend-config="storage_account_name=${{ parameters.storageAccount }}" -reconfigure

        if($null -eq (terraform workspace list | Select-String '${{ parameters.environment }}$')) {
          terraform workspace new ${{ parameters.environment }}
        } else {
          terraform workspace select ${{ parameters.environment }}
        }
      workingDirectory: ${{ parameters.workingDirectory }}
    displayName: Terraform Backend Initialisation
    condition: succeeded()
