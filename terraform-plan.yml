parameters:
  workingDirectory: $(system.defaultWorkingDirectory)
  storageAccount: ""
  armServiceConnection: ""
  idamTenantId: ""
  idamClientId: ""
  idamClientSecret: ""
  environment: ""

steps:
  - script: |
      terraform --version
      terraform init -backend=false -reconfigure
      terraform validate
    workingDirectory: ${{ parameters.workingDirectory }}
    displayName: "Terraform validate"
    condition: succeeded()

  - pwsh: |
      @{
        idam_tenant_id = $env:idam_Tenant_Id
        idam_client_id = $env:idam_Client_Id
        idam_client_secret = $env:idam_Client_Secret
      } | ConvertTo-Json | Set-Content params.auto.tfvars.json -force
    displayName: "Create Param File"
    condition: succeeded()
    env:
      idam_Tenant_Id: ${{ parameters.idamTenantId }}
      idam_Client_Id: ${{ parameters.idamClientId }}
      idam_Client_Secret: ${{ parameters.idamClientSecret }}

  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{ parameters.armServiceConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      AddSpnToEnvironment: true
      failOnStandardError: true
      inlineScript: |
        echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
        echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$env:servicePrincipalKey"
        az account set -s ${{ parameters.armServiceConnection }}
        echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(az account show --query 'id' --output tsv)"
        echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(az account show --query 'tenantId' --output tsv)"
        echo "##vso[task.setvariable variable=ARM_ACCESS_KEY]$(az storage account keys list -n ${{ parameters.storageAccount }} --query [0].value --output tsv)"
    displayName: Terraform Prepare Login
    condition: succeeded()

  - task: AzureCLI@2
    inputs:
      azureSubscription: ${{ parameters.armServiceConnection }}
      scriptType: pscore
      scriptLocation: inlineScript
      failOnStandardError: true
      inlineScript: |
        $tfFolder = Join-Path "${{ parameters.workingDirectory }}" ".terraform"
        if(test-path $tfFolder) {
          Remove-Item $tfFolder -Force -Recurse
        }

        $tfPlan = Join-Path "${{ parameters.workingDirectory }}" "plan.tfplan"
        if(test-path $tfPlan) {
          Remove-Item $tfPlan -Force
        }

        terraform init -backend-config="storage_account_name=${{ parameters.storageAccount }}" -reconfigure
        terraform workspace select ${{ parameters.environment }}
        terraform plan -out="plan.tfplan" -input=false

        echo "##vso[task.setVariable variable=planSucceeded;isOutput=true]$(test-path $tfPlan)"
      workingDirectory: ${{ parameters.workingDirectory }}
    displayName: Terraform plan
    condition: succeeded()
  
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Terraform Plan'
    inputs:
      targetPath: '${{ parameters.workingDirectory }}/plan.tfplan'
      artifact: tfplan-${{ parameters.environment }}
